{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Approach 2: Dynamic Programming\n",
    "\n",
    "### Homogeneous Exponential Case\n",
    "\n",
    "Let $F_{a\\mu}(k) = \\mathbb{P}(X\\leq k)$ the distribution function of $X\\sim \\text{Poisson}(a\\mu)$. Define\n",
    "\\begin{align*}\n",
    "f_a(k) &= a(1 - F_{a\\mu}(k-1)) - \\frac{k}{\\mu}(1 - F_{a\\mu}(k)),\\\\\n",
    "g_a(k) &= (k-1)aF_{a\\mu}(k-1) - \\frac{a^2\\mu}{2}F_{a\\mu}(k-2) - \\frac{k(k-1)}{2\\mu}(1 - F_{a\\mu}(k)).\n",
    "\\end{align*}\n",
    "The following recursion holds:\n",
    "\\begin{align*}\n",
    "C_0(k) = (1-\\omega)g_{\\infty}(k) = (1-\\omega)\\frac{k(k-1)}{2\\mu},\\quad k = 1,\\dots,n,\n",
    "\\end{align*}\n",
    "and for $i=1,\\dots,n$,\n",
    "\\begin{align*}\n",
    "C_i(k) = \\inf_{a\\geq 0}\\left(\\omega f_a(k) + (1 - \\omega)g_a(k) + \\sum_{j=1}^{k+1}\\mathcal{P}_{a}(k)(j)C_{i+1}(j)\\right),\\quad k=1,\\dots,i,\n",
    "\\end{align*}\n",
    "where\n",
    "\\begin{align*}\n",
    "\\mathcal{P}_a(k)(1) = 1 - \\mathbb{P}(X \\leq k - 1) = \\sum_{m=k}^{\\infty}e^{-\\mu a}\\frac{(\\mu a)^m}{m!},\n",
    "\\quad\n",
    "\\mathcal{P}_a(k)(j) = \\mathbb{P}(X = k-j+1) = e^{-\\mu a}\\frac{(\\mu a)^{k-j+1}}{(k-j+1)!},\\quad j = 2,\\dots,k.\n",
    "\\end{align*}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import numpy as np\n",
    "import scipy\n",
    "import math\n",
    "from scipy.stats import poisson\n",
    "from scipy.optimize import minimize\n",
    "\n",
    "NULL = -0.01\n",
    "\n",
    "def cost_a(a,i,k,mu,omega,N):\n",
    "    \"\"\"\n",
    "    Returns the cost when we use a as (interarrival) time\n",
    "    for the next customer.\n",
    "    \"\"\"\n",
    "    \n",
    "    # Poisson cdfs\n",
    "    Fk = [poisson.cdf(k,mu*a), poisson.cdf(k-2,mu*a), poisson.cdf(k-1,mu*a)]\n",
    "    \n",
    "    # compute cost\n",
    "    f = (1 - Fk[-1]) * a - (1 - Fk[0]) * k / mu\n",
    "    g = Fk[-1] * (k - 1) * a - Fk[-2] * mu * a**2 / 2 + (1 - Fk[0]) * k * (k - 1) / (2 * mu)\n",
    "    \n",
    "    cost = omega * f + (1 - omega) * g\n",
    "    cost += (1 - Fk[-1]) * Cstar_homexp(i-1,1,mu,omega,N,FileName)\n",
    "    \n",
    "    for l in range(2,k+2):\n",
    "        cost += poisson.pmf(k-l+1,mu*a) * Cstar_homexp(i-1,l,mu,omega,N,FileName)\n",
    "    \n",
    "    return cost\n",
    "    \n",
    "\n",
    "def Cstar_homexp(i, k, mu=1, omega=1/2, N=15, FileName=\"C_hom.csv\"):\n",
    "    \"\"\"\n",
    "    Implements the Homogeneous Exponential Case.\n",
    "    \"\"\"\n",
    "    \n",
    "    # initialize storage matrix\n",
    "    if os.path.exists(FileName):\n",
    "        C_matrix = np.loadtxt(FileName, delimiter=\",\")\n",
    "    else:\n",
    "        C_matrix = [[NULL for k in range(N+1)] for i in range(N+1)] # NoneType not possible\n",
    "        np.savetxt(FileName, C_matrix, delimiter=\",\")\n",
    "    \n",
    "    # return value if already computed\n",
    "    if C_matrix[i][k] != NULL:\n",
    "        return C_matrix[i][k]\n",
    "    \n",
    "    # initial condition\n",
    "    if not i:\n",
    "        C_matrix[i][k] = (1 - omega) * k * (k-1) / (2 * mu)\n",
    "        print(i,k,C_matrix[i][k])\n",
    "        np.savetxt(FileName, C_matrix, delimiter=\",\")\n",
    "        return C_matrix[i][k]\n",
    "    \n",
    "    min_a = (minimize(cost_a, 0.1, args=(i,k,mu,omega,N), bounds=((0,100),)).x)[0]\n",
    "\n",
    "    C_matrix = np.loadtxt(FileName, delimiter=\",\")\n",
    "    C_matrix[i][k] = min_a\n",
    "    np.savetxt(FileName, C_matrix, delimiter=\",\")\n",
    "    \n",
    "    print(i,k,min_a)\n",
    "    return min_a\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "i k a\n",
      "0 1 0.0\n",
      "0 2 0.5\n",
      "1 1 0.6931469465752621\n",
      "0 3 1.5\n",
      "1 2 1.6783473373016535\n",
      "2 1 1.088696593685443\n",
      "0 4 3.0\n",
      "1 3 2.6740602305632217\n",
      "2 2 2.11203011545469\n",
      "3 1 1.1140480648638078\n",
      "0 5 5.0\n",
      "1 4 3.6720602486172775\n",
      "2 3 3.026717695621246\n",
      "3 2 2.1118431829163535\n",
      "4 1 1.0971409826704668\n",
      "0 6 7.5\n",
      "1 5 4.670896002475082\n",
      "2 4 0.0\n",
      "3 3 0.0\n",
      "4 2 0.0\n",
      "5 1 0.0\n",
      "0 7 10.5\n",
      "1 6 5.670112467134577\n",
      "2 5 0.0\n",
      "3 4 0.0\n",
      "4 3 0.0\n",
      "5 2 0.0\n",
      "6 1 0.0\n",
      "0 8 14.0\n",
      "1 7 6.669616342347711\n",
      "2 6 0.0\n",
      "3 5 0.0\n",
      "4 4 0.0\n",
      "5 3 0.0\n",
      "6 2 0.0\n",
      "7 1 0.0\n",
      "0 9 18.0\n",
      "1 8 7.669247107929642\n",
      "2 7 0.0\n",
      "3 6 0.0\n",
      "4 5 0.0\n",
      "5 4 0.0\n",
      "6 3 0.0\n",
      "7 2 0.0\n",
      "8 1 0.0\n",
      "0 10 22.5\n",
      "1 9 8.668928228154748\n",
      "2 8 0.0\n",
      "3 7 0.0\n",
      "4 6 0.0\n",
      "5 5 0.0\n",
      "6 4 0.0\n",
      "7 3 0.0\n",
      "8 2 0.0\n",
      "9 1 0.0\n",
      "0 11 27.5\n",
      "1 10 9.668723686049287\n",
      "2 9 0.0\n",
      "3 8 0.0\n",
      "4 7 0.0\n",
      "5 6 0.0\n",
      "6 5 0.0\n",
      "7 4 0.0\n",
      "8 3 0.0\n",
      "9 2 0.0\n",
      "10 1 0.0\n",
      "0 12 33.0\n",
      "1 11 10.66853440321865\n",
      "2 10 0.0\n",
      "3 9 0.0\n",
      "4 8 0.0\n",
      "5 7 0.0\n",
      "6 6 0.0\n",
      "7 5 0.0\n",
      "8 4 0.0\n",
      "9 3 0.0\n",
      "10 2 0.0\n",
      "11 1 0.0\n",
      "0 13 39.0\n",
      "1 12 11.668348195396284\n",
      "2 11 0.0\n",
      "3 10 0.0\n",
      "4 9 0.0\n",
      "5 8 0.0\n",
      "6 7 0.0\n",
      "7 6 0.0\n",
      "8 5 0.0\n",
      "9 4 0.0\n",
      "10 3 0.0\n",
      "11 2 0.0\n",
      "12 1 0.0\n",
      "0 14 45.5\n",
      "1 13 12.668219467309706\n",
      "2 12 0.0\n",
      "3 11 0.0\n",
      "4 10 0.0\n",
      "5 9 0.0\n",
      "6 8 0.0\n",
      "7 7 0.0\n",
      "8 6 0.0\n",
      "9 5 0.0\n",
      "10 4 0.0\n",
      "11 3 0.0\n",
      "12 2 0.0\n",
      "13 1 0.0\n",
      "0 15 52.5\n",
      "1 14 13.66811816173787\n",
      "2 13 0.0\n",
      "3 12 0.0\n",
      "4 11 0.0\n",
      "5 10 0.0\n",
      "6 9 0.0\n",
      "7 8 0.0\n",
      "8 7 0.0\n",
      "9 6 0.0\n",
      "10 5 0.0\n",
      "11 4 0.0\n",
      "12 3 0.0\n",
      "13 2 0.0\n",
      "14 1 0.0\n",
      "15 0 0.0\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.0"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "FileName = \"C_hom.csv\"\n",
    "if os.path.exists(FileName):\n",
    "    os.remove(FileName)\n",
    "print(\"i k a\")\n",
    "Cstar_homexp(15,0,mu=1,omega=0.5,N=15,FileName=FileName)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[]\n",
      "[0.6931469465752621, 1.088696593685443, 1.1140480648638078, 1.0971409826704668]\n",
      "[1.6783473373016535, 2.11203011545469, 2.1118431829163535]\n",
      "[2.6740602305632217, 3.026717695621246]\n",
      "[3.6720602486172775]\n",
      "[4.670896002475082]\n",
      "[5.670112467134577]\n",
      "[6.669616342347711]\n",
      "[7.669247107929642]\n",
      "[8.668928228154748]\n",
      "[9.668723686049287]\n",
      "[10.66853440321865]\n",
      "[11.668348195396284]\n",
      "[12.668219467309706]\n",
      "[13.66811816173787]\n",
      "[]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "C_matrix = np.loadtxt(\"C_hom.csv\", delimiter=\",\")\n",
    "\n",
    "for i in range(16):\n",
    "    points = []\n",
    "    for j in range(1,16):\n",
    "        if C_matrix[j][i] > 0:\n",
    "            points.append(C_matrix[j][i])\n",
    "    print(points)\n",
    "    plt.plot(points, 'o-', label='k = %i' %i)\n",
    "\n",
    "plt.grid()\n",
    "plt.xlabel('Numbers to be Scheduled (n)') # deze moet vanaf 1 lopen\n",
    "plt.ylabel('Time until Next Customer')\n",
    "plt.legend(loc=(1.04,0))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy\n",
    "a = numpy.asarray([ [1,0,3], [4,5,6], [7,8,9] ])\n",
    "numpy.savetxt(\"foo.csv\", a, delimiter=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "numpy.loadtxt(\"foo.csv\", delimiter=\",\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "C = pd.read_csv(\"foo.csv\", header=None)\n",
    "C"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import scipy.integrate as integrate"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd \n",
    "  \n",
    "# list of strings \n",
    "lst = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])\n",
    "  \n",
    "# Calling DataFrame constructor on list \n",
    "df = pd.DataFrame(lst) \n",
    "df\n",
    "df.to_excel(\"output.xlsx\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = pd.read_excel(\"output.xlsx\", index_col=0)\n",
    "a\n",
    "a[1][1] = 2\n",
    "a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "for i in range(16):\n",
    "    points = []\n",
    "    for j in range(1,16):\n",
    "        points.append(C_matrix[j][i])\n",
    "    print(points)\n",
    "    plt.plot(points, 'o-', label='k = %i' %i)\n",
    "\n",
    "plt.grid()\n",
    "plt.xlabel('Numbers to be Scheduled (n)') # deze moet vanaf 1 lopen\n",
    "plt.ylabel('Time until Next Customer')\n",
    "plt.legend(loc=(1.04,0))\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "#         first = (gamma * a + Cstar(m-1,0,0,mu,gamma)) * Theta(a,k,mu) - gamma * Theta(a,k+1,mu) * (k + 1) / mu \n",
    "#         second = 0\n",
    "#         for l in range(k):\n",
    "#             second += (1 - gamma) * (k - l + 1) * mu ** l * a ** (l + 1) * np.exp(-mu * a) / math.factorial(l + 1)\n",
    "# #             approx_integral = 0\n",
    "# #             a_rounded = round(a,1)\n",
    "# #             ds = 0.01\n",
    "            \n",
    "# #             for s in np.linspace(0,a_rounded,a_rounded*10 + 1):\n",
    "# #                 approx_integral += Cstar(m-1,k-l,0,mu,gamma) * ds #a-s\n",
    "#             approx_integral = a * Cstar(m-1,k-l,0,mu,gamma)\n",
    "#             second += approx_integral * mu ** (l + 1) * np.exp(-mu * a) / math.factorial(l)\n",
    "        \n",
    "#         third = (1 - gamma) * (k + 1) * np.exp(-mu * a) / mu + Cstar(m-1,k+1,0,mu,gamma) * np.exp(-mu * a) # t+a"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print(C_matrix[1][1])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "poisson.cdf(1,100000)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [1,2,3]\n",
    "a[-2]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Hi Michel,\n",
    "\n",
    "Het klopt, je hebt helemaal gelijk, de redenering is waterdicht. Op de slides van Taylor staat dat zij de functie\n",
    "\\begin{align*}\n",
    "\\omega \\sum_{i=1}^{n}\\mathbb{E}W_i + (1 - \\omega)\\left(\\sum_{i=1}^{n-1}x_i + \\mathbb{E}W_n + \\mu\\right)\n",
    "\\end{align*}\n",
    "willen optimaliseren. Hierin is het rechterdeel de \\emph{makespan}, i.e. de tijd vanaf het begin totdat de laatste klant het systeem heeft verlaten. Je merkt correct op dat\n",
    "\\begin{align*}\n",
    "\\sum_{i=1}^{n-1}x_i + \\mathbb{E}W_n + \\mu = t_n + \\mathbb{E}W_n + \\mu = \\sum_{i=1}^{n}\\mathbb{E}[I_i] + \\sum_{i=1}^{n}\\mathbb{E}[B_i],\n",
    "\\end{align*}\n",
    "dus de makespan is gelijk aan de totale tijd dat de server beschikbaar (al dan niet bezig) is. Onze fout de vorige keer is denk ik dat we dachten dat de makespan gelijk was aan $\\sum_{i=1}^{n}\\mathbb{E}[I_i] + \\sum_{i=1}^{n}\\mathbb{E}W_i$, want dan krijg je\n",
    "\\begin{align*}\n",
    "\\omega \\sum_{i=1}^{n}\\mathbb{E}W_i + (1 - \\omega)\\left(\\sum_{i=1}^{n}\\mathbb{E}[I_i] + \\sum_{i=1}^{n}\\mathbb{E}[W_i]\\right) = 1\\sum_{i=1}^{n}\\mathbb{E}[W_i] + (1 - \\omega)\\sum_{i=1}^{n}\\mathbb{E}[I_i]\n",
    "\\end{align*}\n",
    "als optimalisatieprobleem. En dan heb je dus de $\\omega = 2/3$ nodig. Maar dat is niet juist.\n",
    "\n",
    "Ik heb het programma in Python werkend gekregen, maar er komen soms andere getallen uit dan in R. Ik ga nu $C_{15}^{\\star}(1,2)$ handmatig een beetje proberen uit te rekenen, ik kan zo in ieder geval zien wat er dan fout gaat. Vanavond weer een update.\n",
    "\n",
    "Groetjes,\n",
    "\n",
    "Roshan\n"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
